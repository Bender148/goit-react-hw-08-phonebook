{"version":3,"sources":["components/Main/Main.js","components/Section/Section.js","components/Section/Section.module.css","components/PageTitle/PageTitle.module.css","components/PageTitle/PageTitle.js","components/Title/Title.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/EditorButton/EditorButton.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","views/NotFoundPage.js","components/Title/Title.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/Filter/Filter.js","components/EditorButton/EditorButton.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/ContactsPage.js"],"names":["Main","children","Section","className","styles","section","Container","module","exports","PageTitle","title","defaultProps","NotFoundPage","Title","getFilterValue","state","contacts","filter","getAllContacts","items","getFilteredItems","createSelector","name","number","toLowerCase","includes","toLocaleLowerCase","getLoading","loading","ContactForm","useState","newContact","setNewContact","allContacts","useSelector","dispatch","useDispatch","handleInputChange","useCallback","target","value","handleSubmit","event","preventDefault","contact","existingContact","find","alert","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","form","onSubmit","type","onChange","required","btn","Filter","onUpdateFilter","updateFilter","filterValue","autoComplete","EditorButton","purpose","callback","onClick","ContactListItem","id","isEdited","setIsEdited","saving","setSaving","editedContact","setEditedContact","onDeleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","onUpdateContact","updatedUser","updateContactRequest","patch","updateContactSuccess","updateContactError","updateContact","item","editorInput","color","height","width","info","btnGroup","ContactList","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","filtered","isLoading","loaderConfig","loader","_","isEmpty","map","notification","ContactsPage"],"mappings":"kMAceA,EARF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OAAO,+BAAOA,M,6GCcDC,EAZC,SAAC,GAAkB,IAAhBD,EAAe,EAAfA,SACjB,OACE,yBAASE,UAAWC,IAAOC,QAA3B,SACE,cAACC,EAAA,EAAD,UAAYL,Q,oBCXlBM,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,2B,qGCMpBC,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OAAOA,GAAS,oBAAIP,UAAWC,IAAOM,MAAtB,SAA8BA,KAGhDD,EAAUE,aAAe,CACvBD,MAAO,IAOMD,S,oBClBfF,EAAOC,QAAU,CAAC,MAAQ,uB,oBCA1BD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,IAAM,2B,oBCAzDD,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,IAAM,0BAA0B,OAAS,qDAAqD,KAAO,mDAAmD,KAAO,mDAAmD,OAAS,uD,oBCA7OD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,KAAO,8BAA8B,YAAc,qCAAqC,SAAW,oC,oBCA1JD,EAAOC,QAAU,CAAC,SAAW,8BAA8B,aAAe,kCAAkC,OAAS,8B,iCCDrH,kDAkBeI,UAVM,WACnB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWF,MAAM,6B,8FCLnBG,EAAQ,SAAC,GAAe,IAAbH,EAAY,EAAZA,MACf,OAAOA,GAAS,oBAAIP,UAAWC,IAAOM,MAAtB,SAA8BA,KAGhDG,EAAMF,aAAe,CACnBD,MAAO,IAOMG,Q,wFCfTC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAGzCC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAGzCC,EAAmBC,YACvB,CAACH,EAAgBJ,IACjB,SAACK,EAAOF,GAAR,OACEE,EAAMF,QACJ,gBAAGK,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACED,EAAKE,cAAcC,SAASR,EAAOS,sBACnCH,EAAOE,SAASR,SAKlBU,EAAa,SAAAZ,GAAK,OAAIA,EAAMC,SAASY,S,kBCV5B,SAASC,IAEtB,MAAoCC,mBAAS,CAAER,KAAM,GAAIC,OAAQ,KAAjE,mBAAOQ,EAAP,KAAmBC,EAAnB,KAEMC,EAAcC,YAAYhB,GAE1BiB,EAAWC,cAGXC,EAAoBC,uBACxB,YAAkC,IAAD,IAA9BC,OAAUjB,EAAoB,EAApBA,KAAMkB,EAAc,EAAdA,MACjBR,EAAc,2BAAKD,GAAN,kBAAmBT,EAAOkB,OAEzC,CAACT,IAIGU,EAAeH,uBACnB,SAAAI,GAGE,GAFAA,EAAMC,iBAEDZ,EAAWT,KAAhB,CAKA,ICLasB,EDKPC,EAAkBZ,EAAYa,MAClC,SAAAF,GAAO,OAAIA,EAAQtB,OAASS,EAAWT,QAGzC,GAAIuB,EACFE,MAAM,GAAD,OAAIF,EAAgBvB,KAApB,kCAKPa,GCfaS,EDeOb,ECfA,uCAAI,WAAMI,GAAN,iBAAAa,EAAA,6DAC5Bb,EAASc,eADmB,kBAIHC,IAAMC,KAAK,YAAaP,GAJrB,gBAIlBQ,EAJkB,EAIlBA,KACRjB,EAASkB,YAAkBD,IALD,gDAO1BjB,EAASmB,YAAgB,KAAMC,UAPL,yDAAJ,wDDkBpBvB,EAAc,CAAEV,KAAM,GAAIC,OAAQ,QAEpC,CAACU,EAAaE,EAAUJ,IAG1B,OACE,uBAAM5B,UAAWC,IAAOoD,KAAMC,SAAUhB,EAAxC,UACE,yCAEE,uBACEiB,KAAK,OACLpC,KAAK,OACLkB,MAAOT,EAAWT,KAClBqC,SAAUtB,EACVuB,UAAQ,OAGZ,2CAEE,uBACEF,KAAK,MACLpC,KAAK,SACLkB,MAAOT,EAAWR,OAClBoC,SAAUtB,EACVuB,UAAQ,OAGZ,wBAAQF,KAAK,SAASvD,UAAWC,IAAOyD,IAAxC,oB,sBElES,SAASC,IACtB,IAAM3B,EAAWC,cACX2B,EAAiBzB,uBACrB,SAAAI,GAAK,OAAIP,EAAS6B,YAAatB,EAAMH,OAAOC,UAC5C,CAACL,IAEG8B,EAAc/B,YAAYpB,GAEhC,OACE,qBAAKX,UAAWC,IAAOa,OAAvB,SACE,0DAEE,uBACEyC,KAAK,OACLpC,KAAK,SACLkB,MAAOyB,EACPN,SAAUI,EACVG,aAAa,MACbN,UAAQ,S,sBCpBZO,EAAe,SAAC,GAAiC,IAA/BT,EAA8B,EAA9BA,KAAMU,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACrC,OACE,wBAAQX,KAAMA,EAAMvD,UAAWC,IAAOgE,GAAUE,QAAS,kBAAMD,KAA/D,SACGD,KAKPD,EAAaxD,aAAe,CAC1B+C,KAAM,UAUOS,Q,2CCPA,SAASI,EAAT,GAA6D,IAAD,IAAjC3B,QAAW4B,EAAsB,EAAtBA,GAAIlD,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAE7D,EAAgCO,oBAAS,GAAzC,mBAAO2C,EAAP,KAAiBC,EAAjB,KAEA,EAA4B5C,oBAAS,GAArC,mBAAO6C,EAAP,KAAeC,EAAf,KAEA,EAA0C9C,mBAAS,CACjDR,KAAMA,EACNC,OAAQA,IAFV,mBAAOsD,EAAP,KAAsBC,EAAtB,KAKM3C,EAAWC,cACX2C,EAAkB,SAAAC,GAAS,OAAI7C,EHWjB,SAAA6C,GAAS,8CAAI,WAAM7C,GAAN,SAAAa,EAAA,6DACjCb,EAAS8C,eADwB,kBAIzB/B,IAAMgC,OAAN,oBAA0BF,IAJD,OAK/B7C,EAASgD,YAAqBH,IALC,gDAO/B7C,EAASiD,YAAmB,KAAM7B,UAPH,yDAAJ,sDGXiB8B,CAAcL,KAEtD/C,EAAcC,YAAYhB,GAG1BmB,EAAoBC,uBACxB,YAAkC,IAAD,IAA9BC,OAAUjB,EAAoB,EAApBA,KAAMkB,EAAc,EAAdA,MACjBsC,EAAiB,2BAAKD,GAAN,kBAAsBvD,EAAOkB,OAE/C,CAACqC,IAIGS,EAAkBhD,uBACtB,SAAC0C,EAAWH,GAEV,IAAKA,EAAcvD,OAASuD,EAActD,OAMxC,OALAuD,EAAiB,CACfxD,KAAMA,EACNC,OAAQA,SAEVmD,GAAY,GAKd,IAAM7B,EAAkBZ,EAAYa,MAClC,SAAAF,GAAO,OAAIA,EAAQtB,OAASuD,EAAcvD,MAAQsB,EAAQ4B,KAAOA,KAGnE,GAAI3B,EAGF,OAFAE,MAAM,GAAD,OAAIF,EAAgBvB,KAApB,kCACLoD,GAAY,GAKSzC,EAAYa,MACjC,SAAAF,GAAO,OAAIA,EAAQtB,OAASuD,EAAcvD,MAAQsB,EAAQ4B,KAAOA,OASnEI,GAAU,GAEVzC,EH1BgB,SAAC6C,EAAWO,EAAaX,GAAzB,8CAAuC,WAAMzC,GAAN,iBAAAa,EAAA,6DAC3Db,EAASqD,eADkD,kBAIlCtC,IAAMuC,MAAN,oBAAyBT,GAAaO,GAJJ,gBAIjDnC,EAJiD,EAIjDA,KACRjB,EAASuD,YAAqBtC,IAC9BwB,GAAU,GAN+C,kDAQzDzC,EAASwD,YAAmB,KAAMpC,UARuB,0DAAvC,sDG0BPqC,CAAcZ,EAAWH,EAAeD,KAP/CF,GAAY,KAYhB,CAACzC,EAAaE,EAAUqC,EAAIlD,EAAMC,IAWpC,OACE,qBAAIpB,UAAWC,IAAOyF,KAAtB,UACE,mCACGpB,EACC,sBAAKtE,UAAWC,IAAO0F,YAAvB,UACE,uBACEpC,KAAK,OACLpC,KAAK,OACLkB,MAAOqC,EAAcvD,KACrBqC,SAAUtB,EACVuB,UAAQ,IAEV,uBACEF,KAAK,MACLpC,KAAK,SACLkB,MAAOqC,EAActD,OACrBoC,SAAUtB,EACVuB,UAAQ,OAGVe,EACF,cAAC,IAAD,eA5Ba,CACnBjB,KAAM,WACNqC,MAAO,UACPC,OAAQ,GACRC,MAAO,MA0BD,gCACE,oBAAG9F,UAAWC,IAAO8F,KAArB,UAA4B5E,EAA5B,OACA,mBAAGnB,UAAWC,IAAO8F,KAArB,SAA4B3E,SAKlC,sBAAKpB,UAAWC,IAAO+F,SAAvB,UACG1B,EACC,qCACE,cAAC,EAAD,CACEL,QAAQ,OACRC,SAAU,kBAAMiB,EAAgBd,EAAIK,MAEtC,cAAC,EAAD,CACET,QAAQ,SACRC,SAAU,kBAAMK,GAAY,SAIhC,cAAC,EAAD,CAAcN,QAAQ,OAAOC,SAAU,kBAAMK,GAAY,MAE3D,cAAC,EAAD,CAAcN,QAAQ,SAASC,SAAU,kBAAMU,EAAgBP,Y,wCCzHxD,SAAS4B,IACtB,IAAMjE,EAAWC,cAGjBiE,qBAAU,kBAAMlE,EJNI,uCAAM,WAAMA,GAAN,iBAAAa,EAAA,6DAC1Bb,EAASmE,eADiB,kBAIDpD,IAAMqD,IAAI,aAJT,gBAIhBnD,EAJgB,EAIhBA,KACRjB,EAASqE,YAAqBpD,IALN,gDAOxBjB,EAASsE,YAAmB,KAAMlD,UAPV,yDAAN,yDIMuB,CAACpB,IAG5C,IAAMuE,EAAWxE,YAAYd,GACvBuF,EAAYzE,YAAYP,GAExBiF,EAAe,CACnBlD,KAAM,WACNqC,MAAO,UACPC,OAAQ,GACRC,MAAO,GACP9F,UAAWC,IAAOyG,QAGpB,OACE,qCACGF,GAAa,cAAC,IAAD,eAAYC,KAExBE,IAAEC,QAAQL,IACV,oBAAIvG,UAAWC,IAAOY,SAAtB,SACG0F,EAASM,KAAI,SAAApE,GAAO,OACnB,cAAC2B,EAAD,CAAkC3B,QAASA,GAArBA,EAAQ4B,SAKnCsC,IAAEC,QAAQL,KAAcC,GACvB,mBAAGxG,UAAWC,IAAO6G,aAArB,kCC3BOC,UAfM,WACnB,OACE,cAAClH,EAAA,EAAD,UACE,eAACE,EAAA,EAAD,WACE,cAAC,EAAD,CAAOQ,MAAM,iBACb,cAACmB,EAAD,IACA,cAAC,EAAD,CAAOnB,MAAM,kBACb,cAACoD,EAAD,IACA,cAAC,EAAD,CAAOpD,MAAM,aACb,cAAC0F,EAAD","file":"static/js/contacts-page.ff1b5196.chunk.js","sourcesContent":["// React imports\r\nimport React from 'react';\r\n\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Main = ({ children }) => {\r\n  return <main>{children}</main>;\r\n};\r\n\r\nMain.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Main;","// Imports from React\r\nimport React from 'react';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Container from '../Container';\r\n// Styles imports\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ children }) => {\r\n  return (\r\n    <section className={styles.section}>\r\n      <Container>{children}</Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2-N-o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageTitle_title__3Twq4\"};","// Imports from React\r\nimport React from 'react';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './PageTitle.module.css';\r\n\r\nconst PageTitle = ({ title }) => {\r\n  return title && <h1 className={styles.title}>{title}</h1>;\r\n};\r\n\r\nPageTitle.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nPageTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default PageTitle;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__Sa2En\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__ev9MJ\",\"btn\":\"ContactForm_btn__344FQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3THfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"EditorButton_btn__A237R\",\"delete\":\"EditorButton_delete__2ySS1 EditorButton_btn__A237R\",\"edit\":\"EditorButton_edit__1eaOF EditorButton_btn__A237R\",\"save\":\"EditorButton_save__3a1lr EditorButton_btn__A237R\",\"cancel\":\"EditorButton_cancel__1ydTv EditorButton_btn__A237R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactListItem_info__2x43U\",\"item\":\"ContactListItem_item__2D1UU\",\"editorInput\":\"ContactListItem_editorInput__3Gw9h\",\"btnGroup\":\"ContactListItem_btnGroup__2X8BF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3ZJR8\",\"notification\":\"ContactList_notification__nrf8V\",\"loader\":\"ContactList_loader__1NOnV\"};","// React imports\r\nimport React from 'react';\r\n\r\n// Components imports\r\nimport Main from '../components/Main';\r\nimport Section from '../components/Section';\r\nimport PageTitle from '../components/PageTitle';\r\n\r\nconst NotFoundPage = () => {\r\n  return (\r\n    <Main>\r\n      <Section>\r\n        <PageTitle title=\"404 Page not Found\" />\r\n      </Section>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;","// Imports from React\r\nimport React from 'react';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './Title.module.css';\r\n\r\nconst Title = ({ title }) => {\r\n  return title && <h2 className={styles.title}>{title}</h2>;\r\n};\r\n\r\nTitle.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Title;","// Imports from Redux Toolkit\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\n// Selector to get filter value\r\nconst getFilterValue = state => state.contacts.filter;\r\n\r\n// Selector to get all contacts\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// Selector to get filted contacts (to render in contacts list)\r\nconst getFilteredItems = createSelector(\r\n  [getAllContacts, getFilterValue],\r\n  (items, filter) =>\r\n    items.filter(\r\n      ({ name, number }) =>\r\n        name.toLowerCase().includes(filter.toLocaleLowerCase()) ||\r\n        number.includes(filter),\r\n    ),\r\n);\r\n\r\n// Selector to get loading status\r\nconst getLoading = state => state.contacts.loading;\r\nconst getUpdateLoading = state => state.contacts.updateLoading;\r\n\r\nexport {\r\n  getFilterValue,\r\n  getAllContacts,\r\n  getFilteredItems,\r\n  getLoading,\r\n  getUpdateLoading,\r\n};","// React imports\r\nimport React, { useCallback, useState } from 'react';\r\n\r\n// Imports from Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Styles imports\r\nimport styles from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  // Setting up state for input values\r\n  const [newContact, setNewContact] = useState({ name: '', number: '' });\r\n  // Getting all contacts from store\r\n  const allContacts = useSelector(getAllContacts);\r\n  // Getting dispatch function\r\n  const dispatch = useDispatch();\r\n\r\n  // Function to handle inputs\r\n  const handleInputChange = useCallback(\r\n    ({ target: { name, value } }) => {\r\n      setNewContact({ ...newContact, [name]: value });\r\n    },\r\n    [newContact],\r\n  );\r\n\r\n  // Function to handle form submit\r\n  const handleSubmit = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n\r\n      if (!newContact.name) {\r\n        return;\r\n      }\r\n\r\n      // Checking if the contact already exists\r\n      const existingContact = allContacts.find(\r\n        contact => contact.name === newContact.name,\r\n      );\r\n\r\n      if (existingContact) {\r\n        alert(`${existingContact.name} is already in contacts.`);\r\n        return;\r\n      }\r\n\r\n      // Dispatching action to add new contact to DB\r\n      dispatch(addContact(newContact));\r\n\r\n      // Reseting local state to clean up input values\r\n      setNewContact({ name: '', number: '' });\r\n    },\r\n    [allContacts, dispatch, newContact],\r\n  );\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          type=\"name\"\r\n          name=\"name\"\r\n          value={newContact.name}\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={newContact.number}\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={styles.btn}>\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}","// Imports of actions\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  updateContactRequest,\r\n  updateContactSuccess,\r\n  updateContactError,\r\n} from './contacts-actions';\r\n\r\n// Imports of libraries\r\nimport axios from 'axios';\r\n\r\n// Function to fetch all contacts from DB\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\n// Function to add new contact to DB\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\n// Function to delete contact from DB\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n\r\n// Function to update contact from DB\r\nconst updateContact = (contactId, updatedUser, setSaving) => async dispatch => {\r\n  dispatch(updateContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.patch(`/contacts/${contactId}`, updatedUser);\r\n    dispatch(updateContactSuccess(data));\r\n    setSaving(false);\r\n  } catch (error) {\r\n    dispatch(updateContactError(error.message));\r\n  }\r\n};\r\n\r\nexport { fetchContacts, addContact, deleteContact, updateContact };","// React imports\r\nimport React, { useCallback } from 'react';\r\n\r\n// Imports from Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateFilter } from '../../redux/contacts/contacts-actions';\r\nimport { getFilterValue } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Styles imports\r\nimport styles from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const onUpdateFilter = useCallback(\r\n    event => dispatch(updateFilter(event.target.value)),\r\n    [dispatch],\r\n  );\r\n  const filterValue = useSelector(getFilterValue);\r\n\r\n  return (\r\n    <div className={styles.filter}>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filterValue}\r\n          onChange={onUpdateFilter}\r\n          autoComplete=\"off\"\r\n          required\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}","// React imports\r\nimport React from 'react';\r\n\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styles imports\r\nimport styles from './EditorButton.module.css';\r\n\r\nconst EditorButton = ({ type, purpose, callback }) => {\r\n  return (\r\n    <button type={type} className={styles[purpose]} onClick={() => callback()}>\r\n      {purpose}\r\n    </button>\r\n  );\r\n};\r\n\r\nEditorButton.defaultProps = {\r\n  type: 'button',\r\n};\r\n\r\nEditorButton.propTypes = {\r\n  type: PropTypes.string,\r\n  purpose: PropTypes.string.isRequired,\r\n  callback: PropTypes.func.isRequired,\r\n  args: PropTypes.array,\r\n};\r\n\r\nexport default EditorButton;","// React imports\r\nimport React, { useCallback, useState } from 'react';\r\n\r\n// Imports from Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\r\nimport {\r\n  deleteContact,\r\n  updateContact,\r\n} from '../../redux/contacts/contacts-operations';\r\n\r\n// Components imports\r\nimport EditorButton from '../EditorButton';\r\n\r\n// Helpers imports\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\n// Styles imports\r\nimport styles from './ContactListItem.module.css';\r\n\r\nexport default function ContactListItem({ contact: { id, name, number } }) {\r\n  // Hook to handle if the Editing mode is on. If true two inputs are rendered.\r\n  const [isEdited, setIsEdited] = useState(false);\r\n  // Hook to handle the loader while the contact is being updated and the new one is received from backend.\r\n  const [saving, setSaving] = useState(false);\r\n  // Hook to handle the object of the updated contact.\r\n  const [editedContact, setEditedContact] = useState({\r\n    name: name,\r\n    number: number,\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = contactId => dispatch(deleteContact(contactId));\r\n\r\n  const allContacts = useSelector(getAllContacts);\r\n\r\n  // Function to handle input change\r\n  const handleInputChange = useCallback(\r\n    ({ target: { name, value } }) => {\r\n      setEditedContact({ ...editedContact, [name]: value });\r\n    },\r\n    [editedContact],\r\n  );\r\n\r\n  // Function to handle \"Save\" of the updated the contact\r\n  const onUpdateContact = useCallback(\r\n    (contactId, editedContact) => {\r\n      // Checking if the inputs are not emptry. If they are, the input values are set to initial state, and editor mode is kept on.\r\n      if (!editedContact.name || !editedContact.number) {\r\n        setEditedContact({\r\n          name: name,\r\n          number: number,\r\n        });\r\n        setIsEdited(true);\r\n        return;\r\n      }\r\n\r\n      // Checking if the updated contact does not clash with already existing contacts.\r\n      const existingContact = allContacts.find(\r\n        contact => contact.name === editedContact.name && contact.id !== id,\r\n      );\r\n\r\n      if (existingContact) {\r\n        alert(`${existingContact.name} is already in contacts.`);\r\n        setIsEdited(true);\r\n        return;\r\n      }\r\n\r\n      // If the id is the same, clash does not occur.\r\n      const theSameContact = allContacts.find(\r\n        contact => contact.name === editedContact.name && contact.id === id,\r\n      );\r\n\r\n      if (theSameContact) {\r\n        setIsEdited(false);\r\n        return;\r\n      }\r\n\r\n      // Setting saving to true to display loader while the post request is executed.\r\n      setSaving(true);\r\n      // setSaving is passed as a callback to set saving to false when the request is executed.\r\n      dispatch(updateContact(contactId, editedContact, setSaving));\r\n\r\n      // Exiting editing mode.\r\n      setIsEdited(false);\r\n    },\r\n    [allContacts, dispatch, id, name, number],\r\n  );\r\n\r\n  // Config for loader\r\n  const loaderConfig = {\r\n    type: 'TailSpin',\r\n    color: '#80cbc4',\r\n    height: 30,\r\n    width: 30,\r\n  };\r\n\r\n  return (\r\n    <li className={styles.item}>\r\n      <>\r\n        {isEdited ? (\r\n          <div className={styles.editorInput}>\r\n            <input\r\n              type=\"name\"\r\n              name=\"name\"\r\n              value={editedContact.name}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={editedContact.number}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n        ) : saving ? (\r\n          <Loader {...loaderConfig} />\r\n        ) : (\r\n          <div>\r\n            <p className={styles.info}>{name}:</p>\r\n            <p className={styles.info}>{number}</p>\r\n          </div>\r\n        )}\r\n      </>\r\n\r\n      <div className={styles.btnGroup}>\r\n        {isEdited ? (\r\n          <>\r\n            <EditorButton\r\n              purpose=\"save\"\r\n              callback={() => onUpdateContact(id, editedContact)}\r\n            />\r\n            <EditorButton\r\n              purpose=\"cancel\"\r\n              callback={() => setIsEdited(false)}\r\n            />\r\n          </>\r\n        ) : (\r\n          <EditorButton purpose=\"edit\" callback={() => setIsEdited(true)} />\r\n        )}\r\n        <EditorButton purpose=\"delete\" callback={() => onDeleteContact(id)} />\r\n      </div>\r\n    </li>\r\n  );\r\n}","// React imports\r\nimport React, { useEffect } from 'react';\r\n\r\n// Components imports\r\nimport ContactListItem from '../ContactListItem';\r\n\r\n// Imports from Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\r\nimport {\r\n  getFilteredItems,\r\n  getLoading,\r\n} from '../../redux/contacts/contacts-selectors';\r\n\r\n// Helpers imports\r\nimport _ from 'lodash';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\n// Styles imports\r\nimport styles from './ContactList.module.css';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n\r\n  // Sending HTTP request to fetch contacts\r\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n\r\n  // Getting data from Redux state through selectors\r\n  const filtered = useSelector(getFilteredItems);\r\n  const isLoading = useSelector(getLoading);\r\n\r\n  const loaderConfig = {\r\n    type: 'TailSpin',\r\n    color: '#80cbc4',\r\n    height: 50,\r\n    width: 50,\r\n    className: styles.loader,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loader {...loaderConfig} />}\r\n\r\n      {!_.isEmpty(filtered) && (\r\n        <ul className={styles.contacts}>\r\n          {filtered.map(contact => (\r\n            <ContactListItem key={contact.id} contact={contact} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {_.isEmpty(filtered) && !isLoading && (\r\n        <p className={styles.notification}>No contact found.</p>\r\n      )}\r\n    </>\r\n  );\r\n}","// React imports\r\nimport React from 'react';\r\n\r\n// Components imports\r\nimport Main from '../components/Main';\r\nimport Section from '../components/Section';\r\nimport Title from '../components/Title';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <Main>\r\n      <Section>\r\n        <Title title=\"Add contacts\" />\r\n        <ContactForm />\r\n        <Title title=\"Find contacts\" />\r\n        <Filter />\r\n        <Title title=\"Contacts\" />\r\n        <ContactList />\r\n      </Section>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;"],"sourceRoot":""}